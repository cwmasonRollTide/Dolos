// If I need to run the process again, put this back in main and uncomment, then run in 
// another terraform workspace. Might need to adjust autoscaling I think I broke that
// at the end of testing this

#terraform {
#  cloud {
#    organization = "dolos"
#    workspaces {
#      name = "dolos"
#    }
#  }
#}
#
### Saved prompts and answers (after transcripts are translated into proper shape for training data)
#resource "aws_dynamodb_table" "dolos_parsed_transcripts" {
#  name                 = "dolos-parsed-interview-transcripts"
#  billing_mode         = "PAY_PER_REQUEST"
#  attribute {
#    name               = "guest"
#    type               = "S"
#  }
#  hash_key             = "guest"
#  point_in_time_recovery {
#    enabled = true
#  }
#}
#
#resource "aws_sqs_queue" "terraform_queue_deadletter" {
#  name = "dolos-ingestion-deadletter-queue"
#}
#
### TranscriptParser will be listening to this queue and processing each interview
### as a single item. should be in cluster and scale up to 5 instances
#resource "aws_sqs_queue" "terraform_queue" {
#  name                      = "dolos-ingestion-queue"
#  delay_seconds             = 90
#  max_message_size          = 2048
#  message_retention_seconds = 1209600
#  receive_wait_time_seconds = 10
#  redrive_policy = jsonencode({
#    deadLetterTargetArn = aws_sqs_queue.terraform_queue_deadletter.arn
#    maxReceiveCount     = 4
#  })
#}
#
#resource "aws_ecr_repository" "dolos_transcript_parser" {
#  name = "dolos-repo"
#}
#
#module "permissions" {
#  source              = "./modules/permissions"
#  sqs_queue_arn       = aws_sqs_queue.terraform_queue.arn
#  dynamo_db_table_arn = aws_dynamodb_table.dolos_parsed_transcripts.arn
#}
#
## Beyond is the fargate usage / autoscaling of DolosTranscriptParser
## The background service in that container is polling the SQS queue
## that was populated by running DolosIngestion locally and sending the 
## https://transcripts.cnn.com/show/lkl base url to the local endpoint.
## As long as you have the SQS_QUEUE_URL, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY
## in a .env file within DolosIngestion
#resource "aws_ecs_cluster" "dolos_cluster" {
#  name = "dolos-cluster"
#}
#
#resource "aws_eip" "nat_eip" {
#  vpc = true
#}
#
#resource "aws_subnet" "dolos_public_subnet" {
#  vpc_id                  = aws_vpc.dolos_vpc.id
#  cidr_block              = "10.0.0.0/24"
#  availability_zone       = "us-east-2a"
#  map_public_ip_on_launch = true
#  tags = {
#    Name = "dolos-public-subnet"
#  }
#}
#
#resource "aws_internet_gateway" "dolos_igw" {
#  vpc_id = aws_vpc.dolos_vpc.id
#
#  tags = {
#    Name = "dolos-igw"
#  }
#}
#
#resource "aws_nat_gateway" "dolos_nat_gateway" {
#  allocation_id = aws_eip.nat_eip.id
#  subnet_id     = aws_subnet.dolos_public_subnet.id
#  tags = {
#    Name = "dolos-nat-gateway"
#  }
#}
#
#resource "aws_route_table" "dolos_public_route_table" {
#  vpc_id = aws_vpc.dolos_vpc.id
#
#  tags = {
#    Name = "dolos-public-route-table"
#  }
#}
#
#resource "aws_route" "public_igw_route" {
#  route_table_id         = aws_route_table.dolos_public_route_table.id
#  destination_cidr_block = "0.0.0.0/0"
#  gateway_id             = aws_internet_gateway.dolos_igw.id
#}
#
#resource "aws_route_table_association" "dolos_public_subnet_association" {
#  subnet_id      = aws_subnet.dolos_public_subnet.id
#  route_table_id = aws_route_table.dolos_public_route_table.id
#}
#
#resource "aws_route_table" "dolos_private_route_table" {
#  vpc_id = aws_vpc.dolos_vpc.id
#
#  tags = {
#    Name = "dolos-private-route-table"
#  }
#}
#
#resource "aws_route" "private_nat_route" {
#  route_table_id         = aws_route_table.dolos_private_route_table.id
#  destination_cidr_block = "0.0.0.0/0"
#  nat_gateway_id         = aws_nat_gateway.dolos_nat_gateway.id
#}
#
#resource "aws_route_table_association" "dolos_subnet_association" {
#  subnet_id      = aws_subnet.dolos_subnet.id
#  route_table_id = aws_route_table.dolos_private_route_table.id
#}
#
#resource "aws_vpc" "dolos_vpc" {
#  cidr_block       = "10.0.0.0/16"
#  enable_dns_support = true
#  enable_dns_hostnames = true
#  tags = {
#    Name = "dolos-vpc"
#  }
#}
#
#resource "aws_vpc_endpoint" "ecr_api" {
#  vpc_id       = aws_vpc.dolos_vpc.id
#  vpc_endpoint_type = "Interface"
#  service_name = "com.amazonaws.us-east-2.ecr.api"
#}
#
#resource "aws_vpc_endpoint" "ecr_dkr" {
#  vpc_id       = aws_vpc.dolos_vpc.id
#  vpc_endpoint_type = "Interface"
#  service_name = "com.amazonaws.us-east-2.ecr.dkr"
#}
#
#resource "aws_subnet" "dolos_subnet" {
#  vpc_id     = aws_vpc.dolos_vpc.id
#  cidr_block = "10.0.1.0/24"
#  availability_zone = "us-east-2a" 
#  map_public_ip_on_launch = true
#  tags = {
#    Name = "dolos-subnet"
#  }
#}
#
#resource "aws_security_group" "dolos_sg" {
#  vpc_id = aws_vpc.dolos_vpc.id
#
#  egress {
#    from_port   = 0
#    to_port     = 0
#    protocol    = "-1"
#    cidr_blocks = ["0.0.0.0/0"]
#  }
#
#  ingress {
#    from_port   = 80
#    to_port     = 80
#    protocol    = "tcp"
#    cidr_blocks = ["0.0.0.0/0"]
#  }
#
#  tags = {
#    Name = "dolos-sg"
#  }
#}
#
#resource "aws_ecs_task_definition" "dolos_transcript_parser" {
#  family                   = "dolos-transcript-parser"
#  network_mode             = "awsvpc"
#  requires_compatibilities = ["FARGATE"]
#  cpu                      = "1024"
#  memory                   = "2048"
#  execution_role_arn       = module.permissions.FARGATE_ROLE_ARN
#  task_role_arn            = module.permissions.FARGATE_ROLE_ARN
#
#  container_definitions = jsonencode([{
#    name  = "dolos-parser-container"
#    image = "${aws_ecr_repository.dolos_transcript_parser.repository_url}:latest"
#    portMappings = [{
#      containerPort = 80
#      hostPort      = 80
#    }]
#    environment = [
#      {
#        name  = "DYNAMO_DB_TABLE",
#        value = aws_dynamodb_table.dolos_parsed_transcripts.name
#      },
#      {
#        name  = "SQS_QUEUE_URL",
#        value = aws_sqs_queue.terraform_queue.url
#      }
#    ],
#    logConfiguration = {
#      logDriver = "awslogs",
#      options = {
#        "awslogs-group"         = "/ecs/dolos-transcript-parser",
#        "awslogs-region"        = var.aws_region,
#        "awslogs-stream-prefix" = "ecs"
#      }
#    }
#  }])
#}
#
#resource "aws_ecs_service" "dolos_service" {
#  name            = "dolos-transcript-parser-service"
#  cluster         = aws_ecs_cluster.dolos_cluster.id
#  task_definition = aws_ecs_task_definition.dolos_transcript_parser.arn
#  launch_type     = "FARGATE"
#
#  network_configuration {
#    subnets = [aws_subnet.dolos_subnet.id]
#    security_groups = [aws_security_group.dolos_sg.id]
#  }
#
#  desired_count = 1
#}
#
## Define a CloudWatch metric for number of messages visible in the SQS queue
#resource "aws_cloudwatch_metric_alarm" "sqs_messages_visible" {
#  alarm_name          = "sqs-messages-visible"
#  comparison_operator = "GreaterThanOrEqualToThreshold"
#  evaluation_periods  = "2"
#  metric_name         = "ApproximateNumberOfMessagesVisible"
#  namespace           = "AWS/SQS"
#  period              = "100"
#  statistic           = "Average"
#  threshold           = "1"
#  alarm_description   = "Alarm when there are too many messages in the queue"
#  alarm_actions       = [aws_appautoscaling_policy.scale_out_policy.arn]
#  dimensions = {
#    QueueName = aws_sqs_queue.terraform_queue.name
#  }
#}
#
## Define ECS service auto scaling
#resource "aws_appautoscaling_target" "ecs_target" {
#  max_capacity       = 10 # Maximum number of tasks
#  min_capacity       = 0 # Minimum number of tasks
#  resource_id        = "service/${aws_ecs_cluster.dolos_cluster.name}/${aws_ecs_service.dolos_service.name}"
#  scalable_dimension = "ecs:service:DesiredCount"
#  service_namespace  = "ecs"
#}
#
#resource "aws_appautoscaling_policy" "scale_out_policy" {
#  name               = "scale-out"
#  service_namespace  = "ecs"
#  scalable_dimension = "ecs:service:DesiredCount"
#  resource_id        = "service/${aws_ecs_cluster.dolos_cluster.name}/${aws_ecs_service.dolos_service.name}"
#  policy_type        = "StepScaling"
#
#  step_scaling_policy_configuration {
#    adjustment_type         = "ChangeInCapacity"
#    cooldown                = 200
#    metric_aggregation_type = "Average"
#
#    step_adjustment {
#      scaling_adjustment          = 2
#      metric_interval_lower_bound = 0
#    }
#  }
#}
#
#resource "aws_appautoscaling_policy" "scale_in_policy" {
#  name               = "scale-in"
#  service_namespace  = "ecs"
#  scalable_dimension = "ecs:service:DesiredCount"
#  resource_id        = "service/${aws_ecs_cluster.dolos_cluster.name}/${aws_ecs_service.dolos_service.name}"
#  policy_type        = "StepScaling"
#
#  step_scaling_policy_configuration {
#    adjustment_type         = "ChangeInCapacity"
#    cooldown                = 200
#    metric_aggregation_type = "Average"
#
#    step_adjustment {
#      scaling_adjustment          = -1
#      metric_interval_upper_bound = 0
#    }
#  }
#}
